from flask import Flask,render_template,url_for,request,jsonify
from flask_cors import cross_origin
import pandas as pd
import pickle
import numpy as np
import pyowm
import random


app = Flask(__name__)
model = pickle.load(open("../vot_class.pkl", "rb"))



@app.route("/",methods=['GET'])
@cross_origin()
def home():
	return render_template("index.html")


@app.route("/predict",methods=['GET', 'POST'])
@cross_origin()
def predict():
	if request.method == "POST":
		# DATE

		owm = pyowm.OWM('31db05a57452aedcc0d35d0a1a639a9d')
		mgr = owm.weather_manager()

		date = request.form['date']
		day = float(pd.to_datetime(date, format="%Y-%m-%dT").day)
		month = float(pd.to_datetime(date, format="%Y-%m-%dT").month)

		city_name = str(request.form['cityname'])


		observation = mgr.weather_at_place(city_name)
		w = observation.weather
		temp = random.choice([39.70,14.94,28.15,22.5,28.54,27.56,28.77,27.74,29.84,26.54,25.54,26.85,26.48,28.55,27.65,21.55,21.85,21.65,25.96,32.54,35.88,38.54,39.55,36.23,36.42,19.28,18.26,30.66,30.44,30.56])
		# status = w.detailed_status
		humidity = random.choice([ 23,  28,  34,  49,  59,  58,  55,  36,  30,  37,  57,  60,  51,        45,  27,  35,  66,  82,  87,  39,  26,  70,  78,  83,  74,  43,        29,  47,  68,  75,  84,  77,  54,  33,  52,  40,  61,  86,  63,        50,  62,  73,  42,  25,  44,  65,  85,  72,  32,  71,  41,  31,80,  48,  69,  79,  89,  38,  53,  91,  67,  46,  76,  56,  64,        81,  20,  21,  90,  88,  93,  92,  18,  19,  17,  22,  24,  15,        16,  14,  94,  13,  12,  10,  11,   9,   8,   7,   6,   4,  95,        97, 102,   5,  96])
		wind = w.wind()
		wind_speed = random.choice([3.1 , 3.97, 3.71, 5.04, 4.31, 4.  , 6.24, 5.95, 6.22, 3.95, 2.16,
       5.63, 2.34, 2.2 , 1.09, 0.06, 3.03, 1.48, 1.83, 3.73, 1.43, 1.58,
       2.19, 2.51, 2.87, 4.14, 2.95, 3.06, 3.27, 3.3 , 4.65, 3.54, 3.34,
       5.78, 5.26, 4.84, 4.41, 3.26, 4.53, 3.62, 3.75, 4.89, 3.83, 4.17,
       6.26, 5.45, 5.92, 4.58, 3.13, 4.73, 3.59, 2.86, 2.67, 1.42, 1.82,
       1.27, 2.35, 3.31, 2.73, 1.54, 0.9 , 1.87, 2.74, 3.88, 3.66, 3.7 ,
       3.04, 3.29, 3.14, 3.09, 5.85, 5.17, 4.44, 2.82, 3.58, 5.6 , 4.52,
       3.67, 2.71, 4.63, 3.37, 2.33, 3.65, 2.18, 2.76, 1.63, 1.84, 1.64,
       1.86, 2.44, 2.53, 3.79, 2.8 , 3.68, 4.9 , 3.93, 2.99, 5.61, 5.44,
       3.47, 3.76, 5.73, 5.32, 6.49, 6.3 , 5.99, 5.02, 4.38, 4.97, 4.92,
       3.2 , 2.31, 1.11, 2.22, 2.84, 3.05, 0.4 , 2.01, 1.95, 2.46, 3.08,
       5.18, 4.39, 3.87, 4.19, 6.17, 5.71, 6.77, 6.19, 5.97, 4.98, 4.56,
       5.38, 5.15, 4.68, 5.06, 3.99, 4.09, 5.14, 4.32, 3.02, 2.81, 3.74,
       3.33, 3.01, 4.36, 5.03, 4.94, 6.06, 4.51, 3.38, 3.77, 5.86, 5.23,
       6.12, 5.94, 4.83, 6.34, 5.47, 5.58, 6.31, 4.18, 4.8 , 4.34, 4.47,
       3.98, 3.44, 5.52, 4.21, 4.69, 4.61, 4.67, 6.03, 5.83, 5.41, 6.33,
       5.24, 5.79, 5.69, 5.7 , 4.43, 4.12, 4.3 , 4.91, 5.01, 4.22, 3.53,
       3.89, 4.13, 4.6 , 4.28, 3.17, 3.84, 5.11, 5.39, 4.81, 4.1 , 4.23,
       4.25, 4.37, 3.8 , 4.75, 6.39, 5.59, 5.51, 4.76, 2.3 , 1.79, 3.64,
       4.29, 2.55, 3.6 , 5.28, 4.49, 4.11, 4.59, 6.25, 5.48, 4.79, 4.26,
       2.03, 2.5 , 4.35, 2.72, 2.59, 3.52, 3.69, 4.27, 3.46, 5.84, 5.  ,
       4.05, 2.9 , 4.72, 5.13, 3.24, 2.13, 2.27, 4.88, 4.33, 4.66, 5.9 ,
       6.09, 4.46, 3.23, 1.5 , 1.76, 2.91, 3.28, 4.03, 1.89, 2.83, 4.4 ,
       5.07, 3.21, 5.31, 5.55, 4.42, 2.57, 1.28, 0.62, 2.93, 1.2 , 5.93,
       4.7 , 4.78, 3.45, 4.2 , 3.56, 3.51, 5.76, 5.34, 3.49, 6.14, 6.74,
       3.07, 2.6 , 4.64, 3.39, 3.82, 4.54, 3.91, 3.55, 2.78, 3.86, 3.85,
       2.61, 6.43, 5.4 , 5.57, 5.33, 4.74, 5.36, 5.19, 1.92, 3.81, 4.04,
       5.3 , 2.85, 2.98, 2.88, 3.  , 4.15, 2.62, 4.99, 4.95, 3.22, 2.77,
       5.22, 3.48, 3.92, 2.47, 1.68, 2.26, 2.1 , 1.21, 1.53, 1.01, 1.07,
       2.29, 0.97, 0.37, 0.93, 2.92, 3.18, 2.39, 1.34, 1.23, 0.8 , 2.23,
       0.56, 1.91, 2.32, 1.97, 2.  , 2.4 , 3.35, 3.41, 4.06, 1.98, 1.62,
       2.41, 2.89, 1.39, 2.54, 1.81, 1.72, 1.56, 0.16, 2.7 , 1.9 , 2.42,
       4.86, 3.96, 2.69, 1.57, 1.03, 3.78, 3.94, 0.47, 1.29, 2.65, 1.99,
       1.6 , 1.02, 0.2 , 1.55, 1.52, 2.38, 2.12, 1.31, 2.06, 1.26, 1.94,
       4.08, 2.36, 3.57, 3.36, 3.43, 4.24, 3.25, 2.05, 1.71, 2.04, 2.09,
       1.44, 2.49, 1.93, 3.11, 2.94, 2.17, 1.05, 1.22, 4.45, 4.62, 5.49,
       3.15, 2.43, 3.4 , 3.5 , 5.16, 4.82, 1.77, 1.7 , 5.08, 6.  , 3.63,
       4.48, 5.68, 5.67, 4.77, 5.91, 6.8 , 6.23, 3.42, 3.61, 2.96, 4.16,
       5.53, 6.6 , 4.5 , 4.02, 5.1 , 6.57, 5.74, 4.93, 4.57, 5.35, 6.66,
       4.71, 6.27, 7.27, 6.01, 6.13, 4.07, 6.07, 2.45, 5.05, 1.96, 2.58,
       2.66, 5.43, 2.63, 3.19, 2.11, 5.46, 3.16, 2.07, 2.56, 1.49, 1.32,
       0.68, 2.97, 2.02, 1.85, 1.1 , 2.21, 1.67, 1.36, 2.28, 3.9 , 1.16,
       0.98, 2.52, 2.37, 0.52, 2.14, 0.5 , 1.  , 1.38, 2.15, 5.56, 2.64,
       1.37, 1.88, 1.78, 2.08, 1.74, 1.59, 2.79, 4.96, 0.14, 0.81, 0.72,
       2.48, 1.18, 1.35, 1.75, 0.64, 4.01, 0.78, 3.32, 6.02, 6.94, 6.05,
       1.51, 1.33, 4.87, 0.43, 1.13, 5.89, 5.5 , 0.77, 7.64, 5.82, 1.3 ,
       3.12, 6.11, 0.65, 5.12, 0.99, 5.29, 5.37, 5.64, 0.63, 1.15, 5.25,
       5.54, 5.42, 5.2 , 5.98, 4.85, 5.77, 5.65, 5.96, 4.55, 5.66, 5.27,
       0.74, 3.72, 0.69, 1.66, 0.15, 2.68, 5.87, 1.69, 0.42, 1.65, 0.45,
       1.17, 1.41, 0.71, 0.44, 0.88, 1.14, 1.08, 1.73, 1.06, 0.94, 6.04,
       0.53, 1.25, 1.12, 0.89, 1.24, 0.27, 1.8 , 0.3 , 1.45, 0.76, 0.67,
       0.32, 1.4 , 2.75, 1.47, 0.82, 0.29, 1.04, 6.15, 0.87, 6.71, 0.84,
       8.32, 1.61, 5.75, 2.24, 2.25, 0.79, 0.12, 6.72, 6.89, 6.35, 1.19,
       6.61, 1.46, 0.7 , 8.37, 0.86, 0.91, 5.21, 8.16, 0.46, 8.14, 7.16,
       0.92, 0.59, 8.22, 6.08, 7.11, 5.09, 0.35, 8.45, 7.47, 0.61, 6.38,
       7.19, 6.29, 8.5 , 7.69, 6.98, 6.47, 7.28, 7.86, 7.58, 6.16, 6.32,
       6.78, 7.02, 7.1 , 6.68, 6.92, 8.35, 6.42, 7.71, 6.53, 5.88, 7.24,
       0.49, 7.  , 6.67, 0.55, 6.37, 6.85, 6.91, 0.85, 0.6 , 7.43, 7.65,
       6.75, 6.4 , 7.49, 0.26, 7.12, 6.54, 8.02, 6.81, 7.32, 7.55, 8.17,
       7.83, 7.89, 6.28, 8.04, 7.59, 7.52, 7.29, 0.36, 6.87, 7.23, 8.34,
       8.24, 7.6 , 7.53, 8.46, 7.54, 6.2 , 7.8 , 8.01, 7.7 , 6.63, 8.21,
       8.03, 7.06, 7.4 , 8.26, 8.1 , 7.63, 8.  , 7.3 , 7.9 , 7.42, 6.97,
       7.31, 6.64, 6.99, 8.3 , 6.44, 7.68, 7.93, 6.1 , 0.66, 6.21, 5.81,
       6.58, 5.62, 6.83, 7.33, 6.95, 7.66, 6.82, 6.52, 7.21, 7.87, 7.92,
       7.48, 7.2 , 7.72, 7.5 , 6.73, 7.18, 6.41, 6.88, 7.39, 7.44, 6.5 ,
       7.07, 7.04, 8.48, 8.12, 7.62, 6.59, 6.69, 6.18, 7.35, 6.76, 7.13,
       6.45, 6.36, 6.79, 5.72, 5.8 , 6.62, 6.55, 7.84, 7.05, 7.88, 7.85,
       6.9 , 6.51, 8.27, 7.22, 7.15, 8.11, 7.38, 6.86, 7.78, 7.41, 7.25,
       7.96, 7.51, 7.61, 7.91, 6.56, 6.65, 8.31, 7.73, 7.57, 8.05, 7.17,
       8.28, 7.79, 7.95, 7.98, 7.09, 8.2 , 7.99, 8.06, 7.46, 6.48, 7.56,
       8.36, 7.01, 8.42, 7.75, 8.19, 7.26, 6.93, 8.33, 7.94, 7.81, 8.13,
       7.77, 6.84, 8.23, 6.96, 7.36, 8.25, 7.82, 8.38, 7.14, 7.37, 6.7 ,
       7.03, 8.18, 0.38, 0.95, 6.46, 7.45, 8.49, 8.39, 8.43, 7.08, 0.57,
       7.74, 7.76, 0.54, 0.34, 0.96, 0.83, 8.09, 8.44, 7.97, 8.08, 8.41,
       8.47, 7.67, 7.34, 8.07, 8.29, 0.48, 0.22, 0.75, 0.31, 0.18, 0.39,
       0.25, 0.19, 0.51, 0.58, 0.24, 0.28, 0.23, 0.33, 0.41, 0.03, 0.73,
       8.4 , 8.15, 0.21, 0.17, 0.1 , 0.13, 0.05, 0.08, 0.11, 0.09, 0.07,
       0.04])
		wind_degree = random.choice([139, 128, 133, 150, 155, 230, 207, 201, 208, 227, 234, 149, 187,
       232, 347, 156, 269, 292,  38, 135, 111, 157, 342, 221, 102,  73,
       101, 107,  85, 103, 144, 163, 138, 126, 137, 161, 117, 142, 233,
       197, 213, 210, 124, 175, 274, 335,   7, 255, 341,  78, 132,  97,
       168,  19, 177, 199,  93,  89, 146, 166, 167, 130, 140, 236, 243,
       267, 296, 307, 252, 265, 129, 169, 343, 215, 241,  71,  55,  74,
        83,  80, 104, 131, 160, 148, 159, 151, 143, 268, 282,  90,  54,
        88,  27, 338, 293,  37,  69,  67, 152, 145, 153, 154, 147, 158,
       116, 345,  82,  53,  77,  96,  94, 136, 123, 120, 141, 125, 114,
       173, 121, 118, 112, 176, 164, 180, 205, 134, 226, 115, 206, 188,
       194, 223, 229, 127, 190, 198, 202, 195, 212, 225, 224, 262,  81,
       119, 203, 266,  50,  52,  48,  58,  62,  76,  47,  57, 106, 182,
       181, 196, 219,  72,  51,  59,  87, 100, 110, 122, 108, 113, 228,
       109, 105,  99,  79,  91,  66,  49,  44,  92,  70,  42,  84, 240,
        95,  56,  60,   6,  35, 170, 184, 217, 244,  22, 162, 171, 165,
        86, 186, 248,  98,  64, 172,  65, 183, 174, 193, 237, 216, 283,
       178, 289, 214, 189, 330, 220, 200,  43,  40,  45, 185,  46,  18,
       222,   4, 353, 254, 314, 253, 284, 280, 352, 355, 334,  31, 271,
       313, 348, 245, 328, 250, 192, 324, 340, 247, 211, 278,  28, 239,
       276, 242, 256, 281, 279, 191, 350,  14,  25, 298, 231, 336,   1,
       337, 273, 218,   5,   9, 327, 204, 316, 339,   3,  20, 179, 351,
        15, 275, 209, 264, 259, 308, 258,  26,  41, 285, 260, 287, 235,
        16, 319, 309,  32,  24,  63, 297, 272, 288,  36,   2,  61,   0,
        34,  30, 329, 354, 270, 312,  11,  39, 359, 251, 257, 310, 332,
        29, 326, 311, 263, 238, 246, 305, 304, 294,  23,  10, 320, 303,
       321,  75, 295,  68, 291, 349, 331, 344,  21, 322, 261, 249, 301,
       300, 290, 358,   8, 317, 346,  13, 315, 356, 318, 357, 325, 333,
       299, 302, 323,  33, 306, 360, 286,  12,  17, 277])
		press = w.pressure
		pressure = random.choice( [1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1024,1023])
		sea_level = random.choice( [1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1024,1023])
		clouds = random.choice([ 13.,  52.,   0.,   5.,  43.,  39.,  66.,  83.,  67.,  42., 100.,        86.,   6.,   3.,   1.,  18.,   7.,  14.,   2.,  46.,  88.,  56.,        15.,  22.,  48.,  24.,  65.,  20.,  98.,  87.,  16.,  79.,  97.,        92.,  37.,   9.,  21.,   4.,  51.,  90.,  11.,  25.,  74.,  58.,        45.,  23.,  26.,  32.,  64.,  38.,  12.,  28.,  33.,   8.,  10.,        17.,  34.,  73.,  81.,  99.,  96.,  95.,  35.,  47.,  29.,  59.,        30.,  71.,  55.,  94.,  27.,  44.,  82.,  49.,  72.,  61.,  19.,        84.,  63.,  89.,  60.,  62.,  91.,  40.,  53.,  80.,  31.,  93.,        76.,  75.,  54.,  68.,  85.,  41.,  78.,  57.,  36.,  70.,  69.,        77.,  50.,  -4., 101.])
		level = w.barometric_pressure()
		grnd_level= random.choice( [1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1024,1023])
		reg = owm.city_id_registry()
		list_of_locations = reg.locations_for(city_name)
		delhi = list_of_locations[0]
		latitude = float(delhi.lat)
		longitude = float(delhi.lon)

		if city_name == 'Delhi':
			city = float(1)
		elif city_name == 'Hyderabad':
			city = float(2)
		elif city_name == 'Mumbai':
			city = float(3)
		else:
			city = float(4)


		input_lst = [[city, latitude, longitude, temp, pressure, sea_level, grnd_level, humidity, clouds, wind_speed,wind_degree, month, day]]
		input_lst = np.array(input_lst).reshape((1, -1))
		pred = model.predict(input_lst)

		output = pred
		if output == 1 and (month == 2 or month==1 or month==11 or month==12):
			return render_template("after_sunny.html",city=city_name,pressure = pressure,humidity=humidity,clouds=clouds,day=date, sentense = 'So enjoy the warm sun in this winter season!')
		elif output == 1 and (month == 3 or month==4 or month==4 or month==6 or month==7 or month==8 or month==9 or month==10 ):
			return render_template("after_sunny.html", city=city_name, pressure=pressure, humidity=humidity, clouds=clouds, day=date, sentense='So enjoy yourselves with a cool milkshake and icecream in this summer season!')
		else:
			return render_template("after_rainy.html",city=city_name,pressure = pressure,humidity=humidity,clouds=clouds,day=date)


	return render_template("index.html")

if __name__=='__main__':
	app.run(debug=True)



